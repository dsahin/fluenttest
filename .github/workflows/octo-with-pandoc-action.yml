name: octo-with-pandoc
on: workflow_dispatch
jobs:
  generateIssuesReport:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo    
      # Install Node 12
      - uses: actions/setup-node@v1
        with:
          version: 12
      - run: npm install @octokit/action
      # Node.js script can be anywhere. A good convention is to put local GitHub Actions
      # into the `.github/actions` folder
      - run: node .github/actions/issues.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
      - uses: octokit/graphql-action@v2.x
        id: get_issues
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                issues(last:100, states:OPEN) {
                  edges {
                    node {
                        id 
                        title
                        url
                        number
                        state
                        author {
                          url
                        }
                        labels(first:5) {
                          edges {
                            node {
                              name
                            }
                          }
                        }
                      body
                    }
                  }
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: "mkdir outputs"
      - run: "mkdir pdfs"
      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "outputs/issues.json"
          json: ${{ steps.get_issues.outputs.data }}
      - name: Render template
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: issues.j2
          output_file: outputs/issues.md
          data_file: outputs/issues.json
          data_format: json # Will try to guess from the extension instead (unnecessary in this case)               
      - name: converting markdown to pdf
        uses: docker://rstropek/pandoc-latex
        with:
          args: >-  # allows you to break string into multiple lines
            --from markdown
            --template https://raw.githubusercontent.com/Wandmalfarbe/pandoc-latex-template/v2.0.0/eisvogel.tex 
            --output=outputs/issues.pdf
            outputs/issues.md             
      - name: Upload PDF
        uses: actions/upload-artifact@v1
        with:
          name: outputs
          path: outputs          